{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Desktop/Area/react-task-tracker/src/App.js\",\n    _s = $RefreshSig$();\n\nimport Header from \"./components/Header\";\nimport Tasks from \"./components/Tasks\";\nimport { useState, useEffect } from 'react';\nimport AddTask from \"./components/AddTask\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [showAddTask, setShowAddTask] = useState(false);\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    const getTasks = async () => {\n      const tasksFromServer = await fetchTasks();\n      setTasks(tasksFromServer);\n    };\n\n    fetchTasks();\n  }, []); // fetch tasks from local storage\n\n  const addTask = (task, text, date, completed, reminder) => {\n    const id = Math.floor(Math.random() * 10000) + 1;\n    const newTask = {\n      id,\n      ...task\n    };\n    setTasks([...tasks, newTask]);\n  };\n\n  const deleteTask = id => {\n    setTasks(tasks.filter(task => task.id !== id));\n  };\n\n  const toggleReminder = id => {\n    setTasks(tasks.map(task => {\n      if (task.id === id) {\n        return { ...task,\n          reminder: !task.reminder\n        };\n      } else {\n        return task;\n      }\n    }));\n    console.log('toggleReminder');\n  };\n\n  const toggleCompleted = id => {\n    setTasks(tasks.map(task => {\n      if (task.id === id) {\n        return { ...task,\n          completed: !task.completed\n        };\n      } else {\n        return task;\n      }\n    }));\n    console.log('toggleCompleted');\n  };\n\n  const name = 'React';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      onAdd: () => setShowAddTask(!showAddTask),\n      showAdd: showAddTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 1\n    }, this), showAddTask && /*#__PURE__*/_jsxDEV(AddTask, {\n      onAdd: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }, this), tasks.length > 0 ? /*#__PURE__*/_jsxDEV(Tasks, {\n      tasks: tasks,\n      onAdd: addTask,\n      onDelete: deleteTask,\n      onToggle: toggleReminder,\n      onComplete: toggleCompleted\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 20\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No tasks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 140\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"pA4snfDjny2P+O1a+6NjXQ6HzBU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/macbook/Desktop/Area/react-task-tracker/src/App.js"],"names":["Header","Tasks","useState","useEffect","AddTask","App","showAddTask","setShowAddTask","tasks","setTasks","getTasks","tasksFromServer","fetchTasks","addTask","task","text","date","completed","reminder","id","Math","floor","random","newTask","deleteTask","filter","toggleReminder","map","console","log","toggleCompleted","name","length"],"mappings":"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","sourcesContent":["import Header from \"./components/Header\";\nimport Tasks from \"./components/Tasks\";\nimport {useState , useEffect} from 'react';\nimport AddTask from \"./components/AddTask\";\n\nfunction App() {\n  const [showAddTask, setShowAddTask] = useState(false);\n\n\n  const [tasks, setTasks] = useState([])\n\nuseEffect(() => {\n const getTasks = async ()=>{\n  const tasksFromServer  = await fetchTasks()\n  setTasks(tasksFromServer)\n }\n  fetchTasks();\n}, []);\n\n// fetch tasks from local storage\n\n\n\n\nconst addTask = (task,text, date,completed,reminder) => {\n  const id = Math.floor(Math.random() * 10000) + 1\n    const newTask = { id, ...task }\n    setTasks([...tasks, newTask])\n}\n\n\nconst deleteTask = (id) => {\n  setTasks(tasks.filter(task => task.id !== id))\n}\n\nconst toggleReminder = (id) => {\n  setTasks(tasks.map(task => {\n    if(task.id === id) {\n      return {\n        ...task,\n        reminder: !task.reminder\n      }   \n    } else {\n    return task;}\n  }))\n  console.log('toggleReminder')\n}\n  \nconst toggleCompleted = (id) => {\n  setTasks(tasks.map(task => {\n    if(task.id === id) {\n      return {\n        ...task,\n        completed: !task.completed\n      }\n    } else {\n    return task;}\n  }))\n\n  console.log('toggleCompleted')\n}\n\n\n\n  const name = 'React';\n  return (\n    <div className=\"container\">\n<Header onAdd={() => setShowAddTask(!showAddTask)} showAdd={showAddTask}/>\n{showAddTask && <AddTask onAdd={addTask}/>}\n{tasks.length > 0 ?<Tasks tasks={tasks} onAdd={addTask} onDelete={deleteTask} onToggle={toggleReminder} onComplete ={toggleCompleted} /> : <p>No tasks</p>}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}